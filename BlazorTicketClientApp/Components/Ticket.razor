@using BlazorTicketClientApp.Models
@using BlazorTicketClientApp.Services
@inject ITicketsService ticketsService


@if(TicketModel == null)
{
	<p>ViewModel is null</p>
}
else
{
	<div class="ticket">
		<div class="ticket-info">
			<div>
				<p>
				<strong class="ticket-title">@TicketModel.Title</strong>
				<em class="ticket-submit">Submitted by:</em> @TicketModel.SubtmittedBy
				<a class="ticket-link" href="/details/@TicketModel.Id">Read more</a>
				</p>
			</div>
			<div>
				@if(AbleToDelete)
				{
					<button @onclick="HandleDelete">Delete</button>
				}
				else
				{
					<button @onclick="HandleResolve">Resolve</button>
				}
				
			</div>
		</div>
		<div class="ticket-desc">
			<p><strong>Description: </strong>@TicketModel.Description</p>
		</div>
		<!--Resolved - displaya av vem och vad -->
		<div>
			<p>
				T. Nr: @TicketModel.Id: Resolved : @TicketModel.IsResolved 
			</p>
		</div>

	</div>
	
}


@code {
	[Parameter]
	public TicketViewModel? TicketModel { get; set; }
	[Parameter]
	public bool IsResolved { get; set; } 
	[Parameter]
	public EventCallback OnDelete { get; set; }
	[Parameter]
	public bool AbleToDelete { get; set; }


	private async Task HandleDelete()
	{
		await ticketsService.DeleteTicket(TicketModel.Id);
		await OnDelete.InvokeAsync();
	}

	private async Task HandleResolve()
	{
		TicketModel.IsResolved = !TicketModel.IsResolved;
		await ticketsService.UpdateTicket(TicketModel);
	}
}

